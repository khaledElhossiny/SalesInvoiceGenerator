/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.InvoiceController;
import Model.FileOperations;
import Model.InvoiceHeader;
import Model.InvoiceLines;
import java.awt.Button;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Khaled
 */
public class SalesInvoiceGeneratorFrame extends javax.swing.JFrame {

    /**
     * Creates new form SalesInvoiceGenerator
     */
    InvoiceController invoiceController;
    ArrayList<InvoiceHeader> invoiceHeaders;
//        //Invoice 1
//        InvoiceHeader invoiceHeader1 = new InvoiceHeader();
//        ArrayList<InvoiceLines> invoiceLines1 = new ArrayList<>();
//        invoiceLines1.add(new InvoiceLines(invoiceHeader1.getInvoiceNum(), "Mobile", 3000.5, 2));
//        invoiceLines1.add(new InvoiceLines(invoiceHeader1.getInvoiceNum(), "Charger", 300.99, 2));
//        invoiceLines1.add(new InvoiceLines(invoiceHeader1.getInvoiceNum(), "Cover", 150.99, 3));
//        invoiceLines1.add(new InvoiceLines(invoiceHeader1.getInvoiceNum(), "Headphone", 50.5, 3));
//        invoiceHeader1.setCustomerName("Khaled");
//        invoiceHeader1.setInvoiceLines(invoiceLines1);
//        invoiceHeaders.add(invoiceHeader1);
//        //Invoice 2
//        InvoiceHeader invoiceHeader2 = new InvoiceHeader();
//        ArrayList<InvoiceLines> invoiceLines2 = new ArrayList<>();
//        invoiceLines2.add(new InvoiceLines(invoiceHeader2.getInvoiceNum(), "Laptop", 9169.99, 1));
//        invoiceLines2.add(new InvoiceLines(invoiceHeader2.getInvoiceNum(), "Charger", 499.99, 1));
//        invoiceLines2.add(new InvoiceLines(invoiceHeader2.getInvoiceNum(), "Bag", 300.00, 1));
//        invoiceHeader2.setCustomerName("Mohamed");
//        invoiceHeader2.setInvoiceLines(invoiceLines2);
//        invoiceHeaders.add(invoiceHeader2);
//        //Save Invoice
//        new InvoiceController().SaveInvoice(invoiceHeaders);

    private void initializeInvoiceHeaderTable() {
        DefaultTableModel invoiceTablemodel = (DefaultTableModel) invoiceTable.getModel();
        invoiceHeaders = invoiceController.readInvoices();
        for (int invoiceIdx = 0; invoiceIdx < invoiceHeaders.size(); invoiceIdx++) {
            invoiceTablemodel.addRow(new Object[]{invoiceHeaders.get(invoiceIdx).getInvoiceNum(),
                invoiceHeaders.get(invoiceIdx).getInvoiceDate(),
                invoiceHeaders.get(invoiceIdx).getCustomerName(),
                invoiceController.calculateInvoiceHeaderTotalPrice(invoiceHeaders.get(invoiceIdx))});
        }
    }

    public SalesInvoiceGeneratorFrame() {
        initComponents();
        invoiceController = new InvoiceController();
        initializeInvoiceHeaderTable();
        //initialize view
        setLayout(new GridLayout(1, 2));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // this method display the JFrame to center position of a screen
        setVisible(true);
        MenuBar.add(Menu);
        Menu.add(loadFileMenuItem);
        Menu.add(saveFileMenuItem);
        setJMenuBar(MenuBar);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        invoicePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        invoiceTable = new javax.swing.JTable();
        invoiceNoLbl = new java.awt.Label();
        invoicNoLblValue = new java.awt.Label();
        invoiceDateLbl = new java.awt.Label();
        label4 = new java.awt.Label();
        customerNameLbl = new java.awt.Label();
        invoiceTotalLbl = new java.awt.Label();
        invoiceDateTxtFeild = new java.awt.TextField();
        customerNameTxtFeild = new java.awt.TextField();
        invoiceTotalLblValue = new java.awt.Label();
        legendPanel = new java.awt.Panel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoiceDetailsTable = new javax.swing.JTable();
        createNewInvoiceBtn = new javax.swing.JButton();
        deleteInvoiceBtn = new javax.swing.JButton();
        saveInvoiceDetails = new javax.swing.JButton();
        cancelInvoiceDetails = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        Menu = new javax.swing.JMenu();
        loadFileMenuItem = new javax.swing.JMenuItem();
        saveFileMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        invoicePanel.setBackground(new java.awt.Color(204, 204, 204));

        invoiceTable.setAutoCreateRowSorter(true);
        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Date", "Customer", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceTable.setColumnSelectionAllowed(true);
        invoiceTable.getTableHeader().setReorderingAllowed(false);
        invoiceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoiceTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(invoiceTable);
        invoiceTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        invoiceNoLbl.setText("Invoice Number");

        invoiceDateLbl.setText("Invoice Date");
        invoiceDateLbl.setVisible(false);

        label4.setText("Invoice Date");

        customerNameLbl.setText("Customer Name");

        invoiceTotalLbl.setText("Invoice Total");

        legendPanel.setBackground(new java.awt.Color(204, 204, 204));

        invoiceDetailsTable.setAutoCreateRowSorter(true);
        invoiceDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Item Name", "Item Price", "Count", "Item Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceDetailsTable.setColumnSelectionAllowed(true);
        invoiceDetailsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(invoiceDetailsTable);
        invoiceDetailsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout legendPanelLayout = new javax.swing.GroupLayout(legendPanel);
        legendPanel.setLayout(legendPanelLayout);
        legendPanelLayout.setHorizontalGroup(
            legendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        legendPanelLayout.setVerticalGroup(
            legendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
        );

        createNewInvoiceBtn.setText("Creat new invoice");
        createNewInvoiceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewInvoiceBtnActionPerformed(evt);
            }
        });

        deleteInvoiceBtn.setText("Delete Invoice");
        deleteInvoiceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteInvoiceBtnActionPerformed(evt);
            }
        });

        saveInvoiceDetails.setText("Save");
        saveInvoiceDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveInvoiceDetailsActionPerformed(evt);
            }
        });

        cancelInvoiceDetails.setText("Cancel");
        cancelInvoiceDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelInvoiceDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout invoicePanelLayout = new javax.swing.GroupLayout(invoicePanel);
        invoicePanel.setLayout(invoicePanelLayout);
        invoicePanelLayout.setHorizontalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoicePanelLayout.createSequentialGroup()
                                .addComponent(invoiceTotalLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(invoiceTotalLblValue, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(269, 269, 269))
                            .addComponent(legendPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(invoicePanelLayout.createSequentialGroup()
                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(invoiceDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(invoiceNoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invoiceDateTxtFeild, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invoicNoLblValue, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addComponent(customerNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(customerNameTxtFeild, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(createNewInvoiceBtn)
                .addGap(41, 41, 41)
                .addComponent(deleteInvoiceBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveInvoiceDetails)
                .addGap(41, 41, 41)
                .addComponent(cancelInvoiceDetails)
                .addGap(148, 148, 148))
        );
        invoicePanelLayout.setVerticalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(invoicNoLblValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invoiceNoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoicePanelLayout.createSequentialGroup()
                                .addComponent(invoiceDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22))
                            .addComponent(invoiceDateTxtFeild, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerNameTxtFeild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invoiceTotalLblValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invoiceTotalLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(legendPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cancelInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(saveInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deleteInvoiceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(createNewInvoiceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Menu.setText("File");

        loadFileMenuItem.setText("Load File");
        loadFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileMenuItemActionPerformed(evt);
            }
        });
        Menu.add(loadFileMenuItem);

        saveFileMenuItem.setText("Save File");
        saveFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileMenuItemActionPerformed(evt);
            }
        });
        Menu.add(saveFileMenuItem);

        MenuBar.add(Menu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(invoicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(invoicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayInvoiceDetails() {
        stopCellEditingClearSelections();
        DefaultTableModel invoiceDetailsTablemodel = (DefaultTableModel) invoiceDetailsTable.getModel();
        invoiceDetailsTablemodel.setRowCount(0);    //remove old selection display
        DefaultTableModel invoiceTableModel = (DefaultTableModel) invoiceTable.getModel();
        try {
            int selectedInvoiceNumberIdx = Integer.parseInt(invoiceTableModel.getValueAt(invoiceTable.getSelectedRow(), 0).toString()) - 1;
            invoicNoLblValue.setText(String.valueOf(selectedInvoiceNumberIdx + 1));
            invoiceDateTxtFeild.setText(invoiceHeaders.get(selectedInvoiceNumberIdx).getInvoiceDate());
            customerNameTxtFeild.setText(invoiceHeaders.get(selectedInvoiceNumberIdx).getCustomerName());
            invoiceTotalLblValue.setText(String.valueOf(invoiceController.calculateInvoiceHeaderTotalPrice(
                    invoiceHeaders.get(selectedInvoiceNumberIdx)))
            );
            for (int invoiceDetailsIdx = 0; invoiceDetailsIdx < invoiceHeaders.get(selectedInvoiceNumberIdx).getInvoiceLines().size();
                    invoiceDetailsIdx++) {
                invoiceDetailsTablemodel.addRow(
                        new Object[]{
                            invoiceHeaders.get(selectedInvoiceNumberIdx).getInvoiceLines().get(invoiceDetailsIdx).getInvoiceNum(),
                            invoiceHeaders.get(selectedInvoiceNumberIdx).getInvoiceLines().get(invoiceDetailsIdx).getItemName(),
                            invoiceHeaders.get(selectedInvoiceNumberIdx).getInvoiceLines().get(invoiceDetailsIdx).getItemPrice(),
                            invoiceHeaders.get(selectedInvoiceNumberIdx).getInvoiceLines().get(invoiceDetailsIdx).getCount(),
                            invoiceController.calculateInvoiceLineTotalPrice(invoiceHeaders.get(selectedInvoiceNumberIdx).getInvoiceLines()
                                    .get(invoiceDetailsIdx))
                        });
            }
        } catch (ArrayIndexOutOfBoundsException ex) {
        }
    }

    private void displayInvoices() {
        clearTables();
        initializeInvoiceHeaderTable();
    }

    private void stopCellEditingClearSelections() {
        if (invoiceDetailsTable.isEditing()) {
            invoiceDetailsTable.getCellEditor().stopCellEditing();
        }
        invoiceDetailsTable.clearSelection();
    }
    private void loadFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileMenuItemActionPerformed
        // TODO add your handling code here:
        displayInvoices();
    }//GEN-LAST:event_loadFileMenuItemActionPerformed

    private void invoiceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoiceTableMouseClicked
        // TODO add your handling code here:
        displayInvoiceDetails();
    }//GEN-LAST:event_invoiceTableMouseClicked

    private void saveFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileMenuItemActionPerformed
        // TODO add your handling code here:
        invoiceController.saveInvoices(invoiceHeaders);
    }//GEN-LAST:event_saveFileMenuItemActionPerformed

    private void saveInvoiceDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveInvoiceDetailsActionPerformed
        // TODO add your handling code here:
        stopCellEditingClearSelections();
        DefaultTableModel invoiceDetailsTablemodel = (DefaultTableModel) invoiceDetailsTable.getModel();
        DefaultTableModel invoiceTableModel = (DefaultTableModel) invoiceTable.getModel();
        try {
            int selectedInvoiceNumberIdx = Integer.parseInt(invoiceTableModel.getValueAt(invoiceTable.getSelectedRow(), 0).toString()) - 1;
            double invoiceTotal = 0;
            ArrayList<InvoiceLines> invoiceLines = new ArrayList<>();
            for (int invoiceLinesIdx = 0; invoiceLinesIdx < invoiceDetailsTablemodel.getRowCount(); invoiceLinesIdx++) {
                InvoiceLines myInvoiceLine = new InvoiceLines(
                        selectedInvoiceNumberIdx + 1,
                        invoiceDetailsTablemodel.getValueAt(invoiceLinesIdx, 1).toString(),
                        Float.parseFloat(invoiceDetailsTablemodel.getValueAt(invoiceLinesIdx, 2).toString()),
                        Integer.parseInt(invoiceDetailsTablemodel.getValueAt(invoiceLinesIdx, 3).toString())
                );
                invoiceDetailsTablemodel.setValueAt(invoiceController.calculateInvoiceLineTotalPrice(myInvoiceLine), invoiceLinesIdx, 4);
                invoiceTotal += invoiceController.calculateInvoiceLineTotalPrice(myInvoiceLine);
                invoiceLines.add(myInvoiceLine);
            }
            invoiceTableModel.setValueAt(invoiceDateTxtFeild.getText(), selectedInvoiceNumberIdx, 1);
            invoiceTableModel.setValueAt(customerNameTxtFeild.getText(), selectedInvoiceNumberIdx, 2);
            invoiceTableModel.setValueAt(invoiceTotal, selectedInvoiceNumberIdx, 3);
            invoiceHeaders.get(selectedInvoiceNumberIdx).setInvoiceDate(invoiceDateTxtFeild.getText());
            invoiceHeaders.get(selectedInvoiceNumberIdx).setCustomerName(customerNameTxtFeild.getText());
            invoiceHeaders.get(selectedInvoiceNumberIdx).setInvoiceLines(invoiceLines);
        } catch (ArrayIndexOutOfBoundsException ex) {
            stopCellEditingClearSelections();
            double invoiceTotal = 0;
            int selectedInvoiceNumberIdx = Integer.parseInt(invoiceTableModel.getValueAt(0, 0).toString()) - 1;
            ArrayList<InvoiceLines> invoiceLines = new ArrayList<>();
            int invoiceLinesRowCount = 0;
            for (int invoiceLinesRow = 0; invoiceLinesRow < invoiceDetailsTablemodel.getRowCount(); invoiceLinesRow++) {
                String cellValue = invoiceDetailsTablemodel.getValueAt(invoiceLinesRow, 1).toString();
//                if (cellValue.trim().length() != 0) {
//                    invoiceLinesRowCount++;
//                }
                System.out.println(cellValue.trim().length());
            }
            for (int invoiceLinesIdx = 0; invoiceLinesIdx < invoiceLinesRowCount; invoiceLinesIdx++) {
                InvoiceLines myInvoiceLine = new InvoiceLines(
                        selectedInvoiceNumberIdx + 1,
                        invoiceDetailsTablemodel.getValueAt(invoiceLinesIdx, 1).toString(),
                        Float.parseFloat(invoiceDetailsTablemodel.getValueAt(invoiceLinesIdx, 2).toString()),
                        Integer.parseInt(invoiceDetailsTablemodel.getValueAt(invoiceLinesIdx, 3).toString())
                );
                invoiceDetailsTablemodel.setValueAt(invoiceController.calculateInvoiceLineTotalPrice(myInvoiceLine), invoiceLinesIdx, 4);
                invoiceTotal += invoiceController.calculateInvoiceLineTotalPrice(myInvoiceLine);
                invoiceLines.add(myInvoiceLine);
            }
            invoiceTableModel.setValueAt(invoiceDateTxtFeild.getText(), selectedInvoiceNumberIdx, 1);
            invoiceTableModel.setValueAt(customerNameTxtFeild.getText(), selectedInvoiceNumberIdx, 2);
            invoiceTableModel.setValueAt(invoiceTotal, selectedInvoiceNumberIdx, 3);
            invoiceHeaders.get(selectedInvoiceNumberIdx).setInvoiceDate(invoiceDateTxtFeild.getText());
            invoiceHeaders.get(selectedInvoiceNumberIdx).setCustomerName(customerNameTxtFeild.getText());
            invoiceHeaders.get(selectedInvoiceNumberIdx).setInvoiceLines(invoiceLines);
        }
    }//GEN-LAST:event_saveInvoiceDetailsActionPerformed

    private void cancelInvoiceDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelInvoiceDetailsActionPerformed
        // TODO add your handling code here:
        displayInvoices();
        invoiceController = new InvoiceController();
    }//GEN-LAST:event_cancelInvoiceDetailsActionPerformed

    private void createNewInvoiceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewInvoiceBtnActionPerformed
        // TODO add your handling code here:
        clearTables();
        DefaultTableModel invoiceTableModel = (DefaultTableModel) invoiceTable.getModel();
        DefaultTableModel invoiceDetailsTablemodel = (DefaultTableModel) invoiceDetailsTable.getModel();
        ArrayList<InvoiceLines> invoiceLinese = new ArrayList<>();
        InvoiceHeader invoiceHeader = new InvoiceHeader();
        invoiceTotalLblValue.setText(String.valueOf(invoiceHeader.getInvoiceNum()));
        invoiceDateTxtFeild.setText(new SimpleDateFormat("dd-MM-yyyy").format(new Date()));
        //add rows
        invoiceTableModel.addRow(new Object[]{invoiceHeader.getInvoiceNum(), new SimpleDateFormat("dd-MM-yyyy").format(new Date()),
            null, null});
        for (int rows = 0; rows < 22; rows++) {
            invoiceDetailsTablemodel.addRow(new Object[]{invoiceHeader.getInvoiceNum(), null, null, null});
        }
    }//GEN-LAST:event_createNewInvoiceBtnActionPerformed

    private void deleteInvoiceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteInvoiceBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel invoiceTableModel = (DefaultTableModel) invoiceTable.getModel();
        DefaultTableModel invoiceDetailsTablemodel = (DefaultTableModel) invoiceDetailsTable.getModel();
        try {
            int selectedInvoiceNumberIdx = Integer.parseInt(invoiceTableModel.getValueAt(invoiceTable.getSelectedRow(), 0).toString()) - 1;
            invoiceHeaders.remove(selectedInvoiceNumberIdx);
            invoiceTableModel.removeRow(invoiceTable.getSelectedRow());
            invoiceTableModel.fireTableDataChanged();
            invoiceDetailsTablemodel.getDataVector().removeAllElements();
            invoiceDetailsTablemodel.fireTableDataChanged();
        } catch (ArrayIndexOutOfBoundsException ex) {
        }
        stopCellEditingClearSelections();
    }//GEN-LAST:event_deleteInvoiceBtnActionPerformed

    private void clearTables() {
        DefaultTableModel invoiceTableModel = (DefaultTableModel) invoiceTable.getModel();
        invoiceTableModel.getDataVector().removeAllElements();
        invoiceTableModel.fireTableDataChanged();
        DefaultTableModel invoiceDetailsTablemodel = (DefaultTableModel) invoiceDetailsTable.getModel();
        invoiceDetailsTablemodel.getDataVector().removeAllElements();
        invoiceDetailsTablemodel.fireTableDataChanged();
        invoicNoLblValue.setText("");
        customerNameTxtFeild.setText("");
        invoiceDateTxtFeild.setText("");
        invoiceTotalLblValue.setText("");
        stopCellEditingClearSelections();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesInvoiceGeneratorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesInvoiceGeneratorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesInvoiceGeneratorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesInvoiceGeneratorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesInvoiceGeneratorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Menu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton cancelInvoiceDetails;
    private javax.swing.JButton createNewInvoiceBtn;
    private java.awt.Label customerNameLbl;
    private java.awt.TextField customerNameTxtFeild;
    private javax.swing.JButton deleteInvoiceBtn;
    private java.awt.Label invoicNoLblValue;
    private java.awt.Label invoiceDateLbl;
    private java.awt.TextField invoiceDateTxtFeild;
    private javax.swing.JTable invoiceDetailsTable;
    private java.awt.Label invoiceNoLbl;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JTable invoiceTable;
    private java.awt.Label invoiceTotalLbl;
    private java.awt.Label invoiceTotalLblValue;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label4;
    private java.awt.Panel legendPanel;
    private javax.swing.JMenuItem loadFileMenuItem;
    private javax.swing.JMenuItem saveFileMenuItem;
    private javax.swing.JButton saveInvoiceDetails;
    // End of variables declaration//GEN-END:variables
}
